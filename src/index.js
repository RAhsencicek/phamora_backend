const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const authRoutes = require('./routes/authRoutes');
const fdaRoutes = require('./routes/fdaRoutes');
const pharmacyRoutes = require('./routes/pharmacyRoutes');
const medicineRoutes = require('./routes/medicineRoutes');
const inventoryRoutes = require('./routes/inventoryRoutes');
const transactionRoutes = require('./routes/transactionRoutes');
const adminRoutes = require('./routes/adminRoutes');
// Bildirim rotalarÄ±nÄ± ekle
const notificationRoutes = require('./routes/notificationRoutes');
// const { seedDatabase } = require('./seedData');

const app = express();

// Middleware
app.use(cors());
app.use(express.json());

// MongoDB BaÄŸlantÄ±sÄ±
const MONGODB_URI = process.env.MONGODB_URI || 'mongodb+srv://Cluster53739:1910@cluster53739.lsf3k.mongodb.net/pharmora';
mongoose.connect(MONGODB_URI)
  .then(async () => {
    console.log('MongoDB baÄŸlantÄ±sÄ± baÅŸarÄ±lÄ±');
    
    // Sadece geliÅŸtirme ortamÄ±nda ve istenmesi durumunda seed iÅŸlemi yap
    // if (process.env.SEED_DATABASE === 'true') {
    //   console.log('ðŸŒ± Test verileri ekleniyor...');
    //   await seedDatabase();
    // }
  })
  .catch(err => console.error('MongoDB baÄŸlantÄ± hatasÄ±:', err));

// Routes
app.use('/api/auth', authRoutes);
app.use('/api/fda', fdaRoutes);
app.use('/api/pharmacies', pharmacyRoutes);
app.use('/api/medicines', medicineRoutes);
app.use('/api/inventory', inventoryRoutes);
app.use('/api/transactions', transactionRoutes);
app.use('/api/admin', adminRoutes);
// Bildirim route'unu ekle
app.use('/api/notifications', notificationRoutes);

// SaÄŸlÄ±k kontrolÃ¼ endpoint'i
app.get('/health', (req, res) => {
  res.json({ status: 'ok', message: 'Sunucu Ã§alÄ±ÅŸÄ±yor' });
});

// Test amaÃ§lÄ± Ã¶rnek bildirimler oluÅŸtur
app.get('/api/test-notifications', async (req, res) => {
  try {
    const Notification = require('./models/Notification');
    const User = require('./models/User');
    
    const pharmacistId = req.headers.pharmacistid;
    
    if (!pharmacistId) {
      return res.status(400).json({ message: 'PharmacistId header parametresi eksik' });
    }
    
    const user = await User.findOne({ pharmacistId });
    
    if (!user) {
      return res.status(404).json({ message: `${pharmacistId} ID'li kullanÄ±cÄ± bulunamadÄ±` });
    }
    
    // Varolan tÃ¼m bildirimleri temizle
    await Notification.deleteMany({ recipient: user._id });
    
    // Swift uygulamasÄ±ndaki Ã¶rnek bildirimlere benzer bildirimler oluÅŸtur
    const notifications = [
      {
        recipient: user._id,
        title: "Yeni Teklif",
        message: "Aspirin iÃ§in 15,00 TL tutarÄ±nda yeni bir teklif aldÄ±nÄ±z.",
        type: "offer",
        isRead: false,
        createdAt: new Date(Date.now() - 3600 * 1000) // 1 saat Ã¶nce
      },
      {
        recipient: user._id,
        title: "SipariÅŸ TamamlandÄ±",
        message: "Parol sipariÅŸiniz baÅŸarÄ±yla tamamlandÄ±. SatÄ±cÄ± ile iletiÅŸime geÃ§ebilirsiniz.",
        type: "purchase",
        isRead: false,
        createdAt: new Date(Date.now() - 86400 * 1000) // 1 gÃ¼n Ã¶nce
      },
      {
        recipient: user._id,
        title: "Son Kullanma Tarihi YaklaÅŸÄ±yor",
        message: "Augmentin ilacÄ±nÄ±n son kullanma tarihi 2 hafta iÃ§inde dolacak.",
        type: "expiry",
        isRead: false,
        createdAt: new Date(Date.now() - 172800 * 1000) // 2 gÃ¼n Ã¶nce
      },
      {
        recipient: user._id,
        title: "HoÅŸ Geldiniz",
        message: "Pharmora'ya hoÅŸ geldiniz! Ä°laÃ§ takasÄ± yaparak stok yÃ¶netiminizi optimize edebilirsiniz.",
        type: "system",
        isRead: true,
        createdAt: new Date(Date.now() - 259200 * 1000) // 3 gÃ¼n Ã¶nce
      }
    ];
    
    await Notification.insertMany(notifications);
    
    res.json({
      success: true,
      message: "Test bildirimleri oluÅŸturuldu",
      count: notifications.length
    });
  } catch (error) {
    console.error('Test bildirimleri oluÅŸturma hatasÄ±:', error);
    res.status(500).json({ message: 'Test bildirimleri oluÅŸturulurken hata oluÅŸtu', error: error.message });
  }
});

// Hata yakalama middleware'i
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({ message: 'Bir ÅŸeyler ters gitti!' });
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Sunucu ${PORT} portunda Ã§alÄ±ÅŸÄ±yor`);
}); 